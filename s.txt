void
CLevel::ProcessBulletEnemyCollision()
{


	for (unsigned int i = 0; i < m_vecEnemies.size(); ++i)
	{
		

		for (unsigned int j = 0; j < m_vecPlayerBullets.size(); ++j)
		{
			if (!m_vecEnemies[i]->IsHit())
			{
				//If bullet collides with enemy entity
				if (m_vecPlayerBullets[j]->IsCollidingWith(*m_vecEnemies[i]))
				{
					//Hide enemy, erase bullet, decrease enemy count

					//Clock
					enemyDeadStart = std::clock();
					
					m_vecEnemies[i]->SetDead(true);

					if (m_vecEnemies[i]->IsDead())
					{
						m_vecEnemies[i]->SetSpriteType(ESprite::DEADTOP);
						m_vecEnemies[i]->Draw();
					}

					//TODO: SET SPRITE DEAD ANIMATION
					if (i > 11)
					{
						m_vecEnemies[i - 11]->SetCanShoot(true);
					}
					//TODO: SET SPRITE DEAD ANIMATION
					m_pPlayer->IncreasePlayerScore(m_vecEnemies[i]->GetEnemyPoints());

					delete m_vecPlayerBullets[j];
					m_vecPlayerBullets[j] = 0;

					m_vecPlayerBullets.erase(m_vecPlayerBullets.begin() + j);
					m_pPlayer->SetIsShooting(false);

					if (m_vecEnemies[i]->GetSpriteType() != ESprite::ENEMYSHIP)
					{
						SetEnemysRemaining(GetEnemysRemaining() - 1);
					}
				}
			}
		}
		deadDuration = (clock() - enemyDeadStart) / (double)CLOCKS_PER_SEC;

		if (deadDuration >= 2 && m_vecEnemies[i]->IsDead())
		{
			m_vecEnemies[i]->SetHit(true);
		}

	}

	
}
